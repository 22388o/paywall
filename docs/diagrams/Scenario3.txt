title Distributed Setup with asymmetric Web Token

title Paywall Interactions
actor Client
participant PaywallController
participant PaymentWallInterceptor
participant RequestPolicy
participant TokenVerifier
participant TokenGenerator
participant WebService
participant PaymentHandler
participant LightningHandler
participant LND

Client->PaymentWallInterceptor:Request a WebService API call.

PaymentWallInterceptor->WebService:Check for @PaymentRequired annotation.

create RequestPolicy
PaymentWallInterceptor->RequestPolicy:aggregateSignificantRequestData(HTTPServletRequest)

note over RequestPolicy: Request policy is taken from default config and annotation. RequestPolicyFactory

RequestPolicy-->PaymentWallInterceptor:significantRequestData byte[]
destroy RequestPolicy

PaymentWallInterceptor->TokenGenerator:generatePreImageData()


TokenGenerator-->PaymentWallInterceptor:PreImageData


PaymentWallInterceptor->PaymentHandler:createPaymentData(preImageHash)


PaymentHandler-->PaymentWallInterceptor:PaymentData

PaymentWallInterceptor->TokenGenerator:generatePaymentToken(PreImageData,PaymentData)

note over TokenGenerator:Encrypt/Sign\n\npreImage\npreImageHash\nPaymentData\nsignificantRequestData

TokenGenerator-->PaymentWallInterceptor:Payment JSON Web Token

PaymentWallInterceptor-->Client:Redirect to PaymentController (302)

==Finally Resent the API call with the API Token.==

create PaywallController

Client->PaywallController:/invoice/new

PaywallController->TokenVerifier:verifyPaymentToken(tokenData)

note over TokenVerifier:Decrypt/Verify\n\nPaymentTokenData

TokenVerifier-->PaywallController:PaymentTokenData

PaywallController->LightningHandler:Add Invoice

LightningHandler->LND:Add Invoice

LND-->LightningHandler:InvoiceData

LightningHandler->(2)LND: Subscribe to Settlement.

LightningHandler-->PaywallController:InvoiceData

PaywallController->TokenGenerator:genInvoiceToken(PaymentData,InvoiceData)
TokenGenerator-->PaywallController:Invoice JSON Web Token (byte[])

PaywallController-->Client:JsonData (Bolt11,Connect Info, QR Code, Invoice JSON Web Token)

note over PaywallController,Client: Return HTTP 402 (Payment Required),\ngenerate QR Code and return invoice data as JSON.

note over Client: Invoice Data and QR code is displayed for the end user.

note over Client: Payment is settled out of bands in this context.\nI.e Mobile Wallet or Desktop wallet by scanning QR Code.



==Asyncronious wait for payment to settle.==
LND->(2)LightningHandler:Invoice is settled to LND.

LightningHandler->PaymentHandler: markAsSettled()

note over LightningHandler: Emit InvoiceSettled Event

group check settlement
create PaywallController
note over Client:Alt1: Browser opens a \nWebSocket to listen on settled event.\n(User InvoiceWebToken in Authorization Header)
Client->PaywallController:Open WebSocket for\nInvoiceSettledEvent
PaywallController->TokenVerifier:verifyInvoiceToken()
TokenVerifier-->PaywallController:InvoiceTokenData
PaywallController->LightningHandler:registerInvoiceSettledListender()
LightningHandler->(2)PaywallController:InvoiceSettledEvent
PaywallController->TokenGenerator:genSettlementToken(significateRequestData,SettlementData)
TokenGenerator-->PaywallController:Settlement JSON Web Token

PaywallController->Client:InvoiceSettledEvent\nSettlement JSON Web Token
destroy PaywallController
end

alt looping poll to check settlement
create PaywallController
Client->PaywallController:isSettled()\n(User InvoiceWebToken in Authorization Header)
PaywallController->TokenVerifier:verifySettlementToken()
TokenVerifier-->PaywallController:SettlementTokenData

PaywallController->PaymentHandler:isSettled(preImageHash)
PaymentHandler-->PaywallController: isSettled
PaywallController->TokenGenerator:genSettlementToken(significateRequestData,SettlementData)
TokenGenerator-->PaywallController:Settlement JSON Web Token
PaywallController-->Client:Settlement JSON Web Token
destroy PaywallController
end

note over Client: TODO How to do redirect here? How to verify data?

==Finally Resent the API call with the Settlement Token set as HTTP Header.==

Client->PaymentWallInterceptor:Resend WebService API call with Settlement JSON Web Token in HTTP Authorization Header value.

PaymentWallInterceptor->TokenVerifier:verifyToken()
TokenVerifier-->PaymentWallInterceptor:TokenData

create RequestPolicy
PaymentWallInterceptor->RequestPolicy:aggregateSignificantRequestData(HTTPServletRequest)



RequestPolicy-->PaymentWallInterceptor:significantRequestData byte[]
destroy RequestPolicy

note over PaymentWallInterceptor:check significantRequestData=SettlementTokenData.significantRequestData

PaymentWallInterceptor->PaymentHandler:markAsSettled(preImageHash) Might be called multiple times.

PaymentWallInterceptor->PaymentHandler: requestValid(preImageHash)

PaymentHandler-->PaymentWallInterceptor: requestValid

PaymentWallInterceptor->WebService:If Valid perform the API Request.

WebService-->Client: API Response





