title Paywall Interactions Single Node
actor Client
participant PaywallController
participant PaymentWallInterceptor
participant RequestPolicy
participant TokenVerifier
participant TokenGenerator
participant WebService
participant PaymentHandler
participant LightningHandler
participant LND

Client->PaymentWallInterceptor:Request a WebService API call.

PaymentWallInterceptor->WebService:Check for @PaymentRequired annotation.

create RequestPolicy
PaymentWallInterceptor->RequestPolicy:aggregateSignificantRequestData(HTTPServletRequest)

note over RequestPolicy: Request policy is taken from default config and annotation. RequestPolicyFactory

RequestPolicy-->PaymentWallInterceptor:significantRequestData byte[]
destroy RequestPolicy

PaymentWallInterceptor->TokenGenerator:generatePreImageData()

note over TokenGenerator:PreImageData:\npreImage (random 32 byte)\npreImageHash (sha256)

TokenGenerator-->PaymentWallInterceptor:PreImageData

PaymentWallInterceptor->PaymentHandler:createPaymentData(preImageHash)

note over PaymentHandler:Payment Data:\npreImageHash\ndescription\npaymentAmount\namountUnit\npaymentExpireDate

PaymentHandler-->PaymentWallInterceptor:PaymentData

PaymentWallInterceptor->LightningHandler:addInvoice(PreImageData,PaymentData)

note over LightningHandler:InvoiceData:\npreImageHash\ninvoice\nnodeInfo(pubKey, hostInfo)\ninvoiceAmount\namountUnit\ninvoiceExpireDate

LightningHandler->LND:Add Invoice

LND-->LightningHandler:LND Invoice

LightningHandler->(2)LND: Subscribe to Settlement.

LightningHandler-->PaymentWallInterceptor:InvoiceData

PaymentWallInterceptor->TokenGenerator:genInvoiceToken(significateRequestData,PaymentData,InvoiceData)

note over TokenGenerator:Encrypt/Sign\n\npreImageHash\nsignificateRequestData\nexpireDate

TokenGenerator-->PaymentWallInterceptor:Invoice JSON Web Token (byte[])

PaymentWallInterceptor-->Client:JsonData (Bolt11 invoice,URL,Connect Info, QR Code, Invoice JSON Web Token)

note over PaymentWallInterceptor,Client: Return HTTP 402 (Payment Required),\ngenerate QR Code and return invoice data as JSON.

note over Client: Invoice Data and QR code is displayed for the end user.

note over Client: Payment is settled out of bands in this context.\nI.e Mobile Wallet or Desktop wallet by scanning QR Code.



==Asyncronious wait for payment to settle.==
LND->(2)LightningHandler:Invoice is settled to LND.

LightningHandler->PaymentHandler: markAsSettled(preImageHash)
note over PaymentHandler:SettlementData\npreImageHash\nisSettled\namount\namountUnit\nvalidUntil
PaymentHandler-->LightningHandler:SettlementData

note over LightningHandler: Emit InvoiceSettled Event (SettlementData)

group check settlement
create PaywallController
note over Client:Alt1: Browser opens a \nWebSocket to listen on settled event.\n(User Invoice JSON Web Token in Authorization Header)
Client->PaywallController:Open WebSocket for\nInvoiceSettledEvent
PaywallController->TokenVerifier:verifyInvoiceToken(tokenData)

note over TokenVerifier:Decrypt/Verify\n\nInvoiceTokenData:\npreImageHash\nsignificateRequestData\nexpireDate

TokenVerifier-->PaywallController:InvoiceTokenData
PaywallController->LightningHandler:registerInvoiceSettledListender(preImageHash)
LightningHandler->(2)PaywallController:InvoiceSettledEvent with SettlementData
PaywallController->TokenGenerator:genSettlementToken(significateRequestData,SettlementData)

note over TokenGenerator:Encrypt/Sign\n\npreImageHash\nsignificateRequestData\nvalidUntil

TokenGenerator-->PaywallController:Settlement JSON Web Token

PaywallController->Client:InvoiceSettledEvent\nSettlement JSON Web Token
destroy PaywallController
end

alt looping poll to check settlement
create PaywallController
Client->PaywallController:isSettled()\n(User InvoiceWebToken in Authorization Header)
PaywallController->TokenVerifier:verifyInvoiceToken(tokenData)
TokenVerifier-->PaywallController:InvoiceTokenData

PaywallController->PaymentHandler:isSettled(preImageHash)
PaymentHandler-->PaywallController: SettlementData
PaywallController->TokenGenerator:genSettlementToken(significateRequestData,SettlementData)
TokenGenerator-->PaywallController:Settlement JSON Web Token
PaywallController-->Client:Settlement JSON Web Token
destroy PaywallController
end

==Finally Resent the API call with the API Token.==

Client->PaymentWallInterceptor:Resend WebService API call with Settlement JSON Web Token in HTTP Authorization Header value.

PaymentWallInterceptor->TokenVerifier:verifySettlementToken(tokenData)
TokenVerifier-->PaymentWallInterceptor:SettlementTokenData

create RequestPolicy
PaymentWallInterceptor->RequestPolicy:aggregateSignificantRequestData(HTTPServletRequest)

note over RequestPolicy: Request policy is taken from default config and annotation. RequestPolicyFactory

RequestPolicy-->PaymentWallInterceptor:significantRequestData byte[]
destroy RequestPolicy

note over PaymentWallInterceptor:check significantRequestData=SettlementTokenData.significantRequestData


PaymentWallInterceptor->PaymentHandler: requestValid(preImageHash)

PaymentHandler-->PaymentWallInterceptor: isRequestValid

PaymentWallInterceptor->WebService:If Valid perform the API Request.

WebService-->Client: API Response



