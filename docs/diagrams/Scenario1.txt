title Paywall Interactions Single Node
actor Client
participant PaywallController
participant PaymentWallInterceptor
participant RequestPolicy
participant TokenVerifier
participant TokenGenerator
participant WebService
participant PaymentHandler
participant BTCPayServerConnector
participant BTCPayServer

Client->PaymentWallInterceptor:Request a WebService API call.

PaymentWallInterceptor->WebService:Check for @PaymentRequired annotation.

create RequestPolicy
PaymentWallInterceptor->RequestPolicy:aggregateSignificantRequestData(HTTPServletRequest)

note over RequestPolicy: Request policy is taken from default config and annotation. RequestPolicyFactory

RequestPolicy-->PaymentWallInterceptor:significantRequestData byte[]
destroy RequestPolicy

PaymentWallInterceptor->TokenGenerator:generatePreImageData()

note over TokenGenerator:PreImageData:\npreImage (random 32 byte)\npreImageHash (sha256)

TokenGenerator-->PaymentWallInterceptor:PreImageData

PaymentWallInterceptor->PaymentHandler:createPaymentData(preImageHash)

note over PaymentHandler:Payment Data:\npreImageHash\ndescription\npaymentAmount\namountUnit\npaymentExpireDate

PaymentHandler-->PaymentWallInterceptor:PaymentData


PaymentWallInterceptor->TokenGenerator:genInvoiceToken(significateRequestData,PaymentData)


TokenGenerator-->PaymentWallInterceptor:Invoice JSON Web Token (byte[])

PaymentWallInterceptor->BTCPayServerConnector:addInvoice(PreImageData,PaymentData, InvoiceToken)

note over BTCPayServerConnector:InvoiceData:\nInvoiceToken\ninvoice\ninvoiceAmount\namountUnit\ninvoiceExpireDate

BTCPayServerConnector->BTCPayServer:Add Invoice

note over BTCPayServerConnector:Store the InvoiceToken in BTCPayServer invoice posData field.

BTCPayServer-->BTCPayServerConnector:BTC Invoice

BTCPayServerConnector-->PaymentWallInterceptor:InvoiceData



PaymentWallInterceptor-->Client:RedirectData to BTC Invoice


note over Client: Perform redirect in iframe or window.

note over Client: Payment is settled in BTC Pay Server that redirects back.


==Finally Resent the API call with a reference to the paid invoice.==

Client->PaymentWallInterceptor:Extract the Invoice Id from header.

PaymentWallInterceptor->BTCPayServerConnector:checkInvoiceSettled(tokenData)

BTCPayServerConnector-->PaymentWallInterceptor:InvoiceToken

PaymentWallInterceptor-->PaymentHandler:markAsSettled(invoiceId)

create RequestPolicy
PaymentWallInterceptor->RequestPolicy:aggregateSignificantRequestData(HTTPServletRequest)

note over RequestPolicy: Request policy is taken from default config and annotation. RequestPolicyFactory

RequestPolicy-->PaymentWallInterceptor:significantRequestData byte[]
destroy RequestPolicy



note over PaymentWallInterceptor:check significantRequestData=SettlementTokenData.significantRequestData


PaymentWallInterceptor->PaymentHandler: requestValid(preImageHash)

PaymentHandler-->PaymentWallInterceptor: isRequestValid

PaymentWallInterceptor->WebService:If Valid perform the API Request.

WebService-->Client: API Response



