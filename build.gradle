group 'org.lightningj'

version '0.0.1-Alpha'

apply plugin: "groovy"
apply plugin: 'idea'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'project-report'
apply plugin: 'org.ajoberstar.git-publish'
apply plugin: 'signing'
apply plugin: 'maven'

description = "LightningJ Paywall Core - Core Paywall components for Java"

sourceCompatibility = 1.8

repositories {
    // Spock releases are available from Maven Central
    mavenCentral()
    // Spock snapshots are available from the Sonatype OSS snapshot repository
   // maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
}

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://dl.bintray.com/asciidoctor/maven/"}
    }
    dependencies {
        // Documentation generation
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.7'
        classpath 'org.ajoberstar:gradle-git-publish:0.4.1'
    }
}

dependencies {
    compile 'org.bouncycastle:bcprov-jdk15on:1.60'
    compile 'org.bouncycastle:bcpkix-jdk15on:1.60'
    compile 'org.lightningj:lightningj:0.5.0-Beta'
    compile 'org.bitbucket.b_c:jose4j:0.6.4' // JSON Web Token Generator, JWS and JWE

    compileOnly 'javax.servlet:javax.servlet-api:4.0.1'
    testCompile 'javax.servlet:javax.servlet-api:4.0.1'

    // mandatory dependencies for using Spock
    testCompile "org.spockframework:spock-core:1.1-groovy-2.4"

    // optional dependencies for using Spock
    testCompile "org.hamcrest:hamcrest-core:1.3" // only necessary if Hamcrest matchers are used
    testRuntime "net.bytebuddy:byte-buddy:1.6.5"          // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:2.5.1"    // allows mocking of classes without default constructor (together with CGLIB)

}




/*
  Adds generated source directories to be included in javadoc generation.
 */
javadoc {
    failOnError= false
}

asciidoctor {
    sourceDir = file('docs')
    outputDir = file('build/docs')
    attributes= [stylesheet: "$projectDir/docs/stylesheets/colony.css",
                 toc: 'left', 'toc-title': 'Table of Contents'
    ]
}

task ('doc',type: Copy,dependsOn: [javadoc, asciidoctor, htmlDependencyReport]){
    from('build/reports/project/'){
        include('dependencies/**')
    }
    from('build/docs/'){
        include('javadoc/**')
    }
    from('build/reports/tests'){
        include('test/**')
    }
    from('LICENSE.txt'){
    }
    from('docs'){
        include('CNAME')
    }
    from('docs'){
        include('lightningj-release-pubkey.asc')
    }
    into('build/docs/html5')
}

/*
  Task for specifying for Intellij which source directories to use.
 */
idea {
    module {
        contentRoot = project.projectDir
    }
}

gitPublish {
    // where to publish to (repo must exist)
    repoUri = 'https://github.com/lightningj-org/paywall-core.git'
    // (or 'https://github.com/ajoberstar/test-repo.git', depending on authentication)

    // branch will be created if it doesn't exist
    branch = 'gh-pages'

    // generally, you don't need to touch this
    //repoDir = file("$buildDir/somewhereelse") // defaults to $buildDir/gitPublish

    // what to publish, this is a standard CopySpec
    contents {
        from 'build/docs/html5'
    }

    // what to keep in the existing branch (include=keep)
//    preserve {
//        include '1.0.0/**'
//        exclude '1.0.0/temp.txt'
//    }

    // message used when committing changes
    commitMessage = 'Publishing a new page' // defaults to 'Generated by gradle-git-publish'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

// Use external gpg2 command to support signing by hardware keys (i.e. SmartCard) and sign only
// if build should be uploaded to Maven Central.
signing {
    required { gradle.taskGraph.hasTask(uploadArchives) }
    useGpgCmd()
    sign configurations.archives
}

signArchives.onlyIf {gradle.taskGraph.hasTask(uploadArchives)}


uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'paywall-core'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'LightningJ Paywall Core - Core Paywall components for Java'
                url 'http://paywall.lightningj.org'

                scm {
                    connection 'https://github.com/lightningj-org/paywall-core.git'
                    developerConnection 'https://github.com/lightningj-org/paywall-core.git'
                    url 'https://github.com/lightningj-org/paywall-core'
                }

                licenses {
                    license {
                        name 'GNU Lesser General Public License v3.0'
                        url 'http://www.gnu.org/licenses/lgpl.txt'
                    }
                }

                developers {
                    developer {
                        id 'herrvendil'
                        name 'Philip Vendil'
                        email 'info@lightningj.org'
                    }
                }
            }
        }
    }
}

uploadArchives.dependsOn.add(signArchives)

