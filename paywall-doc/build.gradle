
apply plugin: 'org.asciidoctor.convert'

// TODO enable git-publish plugin
//apply plugin: 'org.ajoberstar.git-publish'


description = "LightningJ Paywall - Documentation"

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://dl.bintray.com/asciidoctor/maven/"}
    }
    dependencies {
        // Documentation generation
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.7'
        classpath 'org.ajoberstar:gradle-git-publish:0.4.1'
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-beta.2'
    }
}

asciidoctor {
    sourceDir = file('docs')
    outputDir = file('build/docs')
    attributes= [stylesheet: "$projectDir/docs/stylesheets/colony.css",
                 toc: 'left', 'toc-title': 'Table of Contents'
    ]
    backends = ["html5"]
}

// TODO Make this work, with reports and javadoc
//task ('doc',type: Copy,dependsOn: [javadoc, asciidoctor, htmlDependencyReport]){



// TODO git publish, signing etc.

//gitPublish {
//    // where to publish to (repo must exist)
//    repoUri = 'https://github.com/lightningj-org/paywall-core.git'
//    // (or 'https://github.com/ajoberstar/test-repo.git', depending on authentication)
//
//    // branch will be created if it doesn't exist
//    branch = 'gh-pages'
//
//    // generally, you don't need to touch this
//    //repoDir = file("$buildDir/somewhereelse") // defaults to $buildDir/gitPublish
//
//    // what to publish, this is a standard CopySpec
//    contents {
//        from 'build/docs/html5'
//    }
//
//    // what to keep in the existing branch (include=keep)
////    preserve {
////        include '1.0.0/**'
////        exclude '1.0.0/temp.txt'
////    }
//
//    // message used when committing changes
//    commitMessage = 'Publishing a new page' // defaults to 'Generated by gradle-git-publish'
//}




// TODO FIX WHEN PERFORMING SIGNING
// Use external gpg2 command to support signing by hardware keys (i.e. SmartCard) and sign only
// if build should be uploaded to Maven Central.
//signing {
//    required { gradle.taskGraph.hasTask(uploadArchives) }
//    useGpgCmd()
//    sign configurations.archives
//}
//
//signArchives.onlyIf {gradle.taskGraph.hasTask(uploadArchives)}

// TODO FIX
//uploadArchives {
//    repositories {
//        mavenDeployer {
//            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
//
//            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
//                authentication(userName: ossrhUsername, password: ossrhPassword)
//            }
//
//            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
//                authentication(userName: ossrhUsername, password: ossrhPassword)
//            }
//
//            pom.project {
//                name 'paywall-core'
//                packaging 'jar'
//                // optionally artifactId can be defined here
//                description 'LightningJ Paywall Core - Core Paywall components for Java'
//                url 'http://paywall.lightningj.org'
//
//                scm {
//                    connection 'https://github.com/lightningj-org/paywall-core.git'
//                    developerConnection 'https://github.com/lightningj-org/paywall-core.git'
//                    url 'https://github.com/lightningj-org/paywall-core'
//                }
//
//                licenses {
//                    license {
//                        name 'GNU Lesser General Public License v3.0'
//                        url 'http://www.gnu.org/licenses/lgpl.txt'
//                    }
//                }
//
//                developers {
//                    developer {
//                        id 'herrvendil'
//                        name 'Philip Vendil'
//                        email 'info@lightningj.org'
//                    }
//                }
//            }
//        }
//    }
//}
//
//uploadArchives.dependsOn.add(signArchives)

