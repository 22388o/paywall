buildscript {
	ext {
		springBootVersion = '2.1.3.RELEASE'
	}
	repositories {
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "gradle.plugin.com.energizedwork.webdriver-binaries:webdriver-binaries-gradle-plugin:1.4"
	}
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "com.energizedwork.webdriver-binaries"


ext {
	// The drivers we want to use
	drivers = ["firefox", "chrome", "chromeHeadless"]
	//drivers = ["chromeHeadless"]

	gebVersion = '3.0.1'
	seleniumVersion = '3.14.0'
	chromeDriverVersion = '75.0.3770.90'
	geckoDriverVersion = '0.24.0'

}

dependencies {

	compile project(':paywall-spring')

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	implementation 'org.mariadb.jdbc:mariadb-java-client:2.4.0'
	implementation 'com.h2database:h2'
	testCompile 'org.spockframework:spock-spring:1.3-groovy-2.5'
	testCompile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Force use of guava during spring boot2 tests due to dependency in functional tests.
	// Conflicting guava between selenium and netty (from lightningJ) dependencies.
	testCompile "com.google.guava:guava:25.0-jre"
	testCompile "org.gebish:geb-spock:$gebVersion"
	// Drivers
	testCompile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
	testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
}

webdriverBinaries {
	chromedriver chromeDriverVersion
	geckodriver geckoDriverVersion
}

drivers.each { driver ->
	task "${driver}Test"(type: Test, dependsOn : [':paywall-js:build']) {
		group JavaBasePlugin.VERIFICATION_GROUP

		includes = ['**/*FunctionalSpec*']
		outputs.upToDateWhen { false }  // Always run tests

		systemProperty "geb.build.reportsDir", reporting.file("geb/$name")
		systemProperty "geb.env", driver
	}
}

task functionalTest (dependsOn: ["chromeTest","firefoxTest"], group: "verification"){

}

test{
	exclude '**/*FunctionalSpec*'
}

tasks.withType(Test) {
	maxHeapSize = "1g"
	jvmArgs '-XX:MaxMetaspaceSize=128m'
	testLogging {
		exceptionFormat = 'full'
	}
}

tasks.withType(GroovyCompile) {
	groovyOptions.forkOptions.memoryMaximumSize = '256m'
}

// Do not upload any release archives from this project
uploadArchives.onlyIf {false}