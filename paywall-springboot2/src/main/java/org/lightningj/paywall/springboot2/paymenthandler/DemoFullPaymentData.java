/*
 * ***********************************************************************
 *                                                                       *
 *  LightningJ                                                           *
 *                                                                       *
 *  This software is free software; you can redistribute it and/or       *
 *  modify it under the terms of the GNU Lesser General Public License   *
 *  (LGPL-3.0-or-later)                                                  *
 *  License as published by the Free Software Foundation; either         *
 *  version 3 of the License, or any later version.                      *
 *                                                                       *
 *  See terms of license at gnu.org.                                     *
 *                                                                       *
 *************************************************************************/
package org.lightningj.paywall.springboot2.paymenthandler;

import org.lightningj.paywall.paymenthandler.data.FullPaymentData;
import org.lightningj.paywall.util.Base58;
import org.lightningj.paywall.vo.amount.Amount;
import org.lightningj.paywall.vo.amount.BTC;
import org.lightningj.paywall.vo.amount.CryptoAmount;

import javax.persistence.*;
import java.time.Duration;
import java.time.Instant;

/**
 * Demo payment data implementing the FullPaymentData requirements
 * for payment flow to work.
 * It is a simple JPA Entity with columns for all fields defined for FullPaymentData.
 *
 * @author philip 2019-04-30
 */
@Entity
public class DemoFullPaymentData implements FullPaymentData {

    @Id
    @GeneratedValue(strategy= GenerationType.AUTO)
    private Integer id;

    @Column(nullable = false)
    private String preImageHash;

    private String bolt11Invoice;

    private String description;

    private long orderAmount;

    private long invoiceAmount;

    private long settledAmount;

    private Instant settlementValidFrom;

    private Long settlementDuration;

    private Instant settlementDate;

    private Instant settlementExpireDate;

    private Instant invoiceDate;

    private Instant invoiceExpireDate;

    private boolean settled = false;

    private boolean payPerRequest = false;

    private boolean executed = false;

    /**
     *
     * @return Unique Id of database row.
     */
    public Integer getId() {
        return id;
    }

    /**
     *
     * @param id Unique Id of database row.
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Unique identifier of a payment in the system and also used in LightningHandler
     * to identify an invoice. Should be generated by TokenGenerator when
     * creating an order and not set manually.
     *
     * @return the unique identifier of a payment.
     */
    @Override
    public byte[] getPreImageHash() {
        return Base58.decode(this.preImageHash);
    }

    /**
     * @param preImageHash unique identifier of a payment in the system and also used in LightningHandler
     *                     to identify an invoice. Should be generated by TokenGenerator when
     *                     creating an order and not set manually.
     */
    @Override
    public void setPreImageHash(byte[] preImageHash) {
        this.preImageHash = Base58.encodeToString(preImageHash);
    }

    /**
     * @return the requested amount for payment. This can be either a FiatAmount or CryptoAmount but
     * always make sure the systems configured CurrencyConverter supports this currency when converting
     * into a currency accepted by the LightningHandler later in the payment flow.
     */
    @Override
    public Amount getOrderAmount() {
        return new BTC(orderAmount);
    }

    /**
     * @param orderAmount the requested amount for payment. This can be either a FiatAmount or CryptoAmount but
     *                    always make sure the systems configured CurrencyConverter supports this currency when converting
     *                    into a currency accepted by the LightningHandler later in the payment flow.
     */
    @Override
    public void setOrderAmount(Amount orderAmount) {
        assert orderAmount instanceof CryptoAmount;
        this.orderAmount = ((CryptoAmount) orderAmount).getValue();
    }

    /**
     * @return true if related invoice have been settled in full.
     */
    @Override
    public boolean isSettled() {
        return this.settled;
    }

    /**
     * @param settled true if related invoice have been settled in full.
     */
    @Override
    public void setSettled(boolean settled) {
        this.settled = settled;
    }

    /**
     * @return the bolt11 lightning invoice displayed to the end user before
     * paying and invoice.
     */
    @Override
    public String getBolt11Invoice() {
        return bolt11Invoice;
    }

    /**
     * @param bolt11Invoice the bolt11 lightning invoice displayed to the end user before
     *                      paying and invoice.
     */
    @Override
    public void setBolt11Invoice(String bolt11Invoice) {
        this.bolt11Invoice = bolt11Invoice;
    }

    /**
     * @return the valid from timestamp used in generated settlement tokens. If null is
     * no valid from used, only validUntil.
     */
    @Override
    public Instant getSettlementValidFrom() {
        return settlementValidFrom;
    }

    /**
     * @param settlementValidFrom the valid from timestamp used in generated settlement tokens. If null is
     *                            no valid from used, only validUntil.
     */
    @Override
    public void setSettlementValidFrom(Instant settlementValidFrom) {
        this.settlementValidFrom = settlementValidFrom;
    }

    /**
     * @return a short description of the payment used in the lightning invoice and might
     * be displayed to the end user.
     */
    @Override
    public String getDescription() {
        return description;
    }

    /**
     * @param description a short description of the payment used in the lightning invoice and might
     *                    be displayed to the end user.
     */
    @Override
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * @return the amount set in the lightning invoice, this is the same as orderAmount if
     * the same currency is used in order as in lightning invoice, otherwise is the currency
     * converted before creating the invoice in LightningHandler and the actual invoiced amount
     * is specified here.
     */
    @Override
    public CryptoAmount getInvoiceAmount() {
        return new BTC(invoiceAmount);
    }

    /**
     * @param invoiceAmount the amount set in the lightning invoice, this is the same as orderAmount if
     *                      the same currency is used in order as in lightning invoice, otherwise is the currency
     *                      converted before creating the invoice in LightningHandler and the actual invoiced amount
     *                      is specified here.
     */
    @Override
    public void setInvoiceAmount(CryptoAmount invoiceAmount) {
        assert invoiceAmount instanceof CryptoAmount;
        this.invoiceAmount = ((CryptoAmount) invoiceAmount).getValue();
    }

    /**
     * @return the date the invoice was created in LightningHandler.
     */
    @Override
    public Instant getInvoiceDate() {
        return invoiceDate;
    }

    /**
     * @param invoiceDate the date the invoice was created in LightningHandler.
     */
    @Override
    public void setInvoiceDate(Instant invoiceDate) {
        this.invoiceDate = invoiceDate;
    }

    /**
     * @return the date a generated invoice should expire, this value will be used
     * when creating invoice in LightningHandler. If null will default invoice validity
     * be used to calculate an expire date automatically.
     */
    @Override
    public Instant getInvoiceExpireDate() {
        return invoiceExpireDate;
    }

    /**
     * @param invoiceExpireDate the date a generated invoice should expire, this value will be used
     *                          when creating invoice in LightningHandler. If null will default invoice validity
     *                          be used to calculate an expire date automatically.
     */
    @Override
    public void setInvoiceExpireDate(Instant invoiceExpireDate) {
        this.invoiceExpireDate = invoiceExpireDate;
    }

    /**
     * @return the amount that was settled in the LightningHandlers supported crypto currency.
     * Should be equal to invoiceAmount if fully settled. Null if invoice isn't settled yet.
     */
    @Override
    public CryptoAmount getSettledAmount() {
        return new BTC(settledAmount);
    }

    /**
     * @param settledAmount the amount that was settled in the LightningHandlers supported crypto currency.
     *                      Should be equal to invoiceAmount if fully settled. Null if invoice isn't settled yet.
     */
    @Override
    public void setSettledAmount(CryptoAmount settledAmount) {
        if(settledAmount instanceof CryptoAmount) {
            this.settledAmount = ((CryptoAmount) settledAmount).getValue();
        }
    }

    /**
     * @return the timestamp the invoice was settled in LightningHandler. Null if not settled yet.
     */
    @Override
    public Instant getSettlementDate() {
        return settlementDate;
    }

    /**
     * @param settlementDate the timestamp the invoice was settled in LightningHandler. Null if not settled yet.
     */
    @Override
    public void setSettlementDate(Instant settlementDate) {
        this.settlementDate = settlementDate;
    }

    /**
     * The settlement duration indicates how long time a generated settlement should be valid. If
     * not set will a default settlement value be used. In FullPaymentData it is also possible
     * to specifiy an expiration date of an settlement used if it's required to set a fixed time when
     * the settlement should expire, for example if a settlement should be valid the entire day or month.
     * <p>
     * If settlement expire date is set it has precedence over settlementDuration.
     * </p>
     * <p>
     * <b>Important:</b> Data in this field is only set to instruct the settlement token generator of expiration date.
     * the actual settlement date is not updated in this field.
     * </p>
     *
     * @return the duration the settlement should be valid, null if default settlement duration
     * should be used or if a fixed expiration date should be used.
     * @see FullPaymentData#getSettlementExpireDate()
     */
    @Override
    public Duration getSettlementDuration() {
        if(settlementDuration == null){
            return null;
        }
        return Duration.ofSeconds(settlementDuration);
    }

    /**
     * The settlement duration indicates how long time a generated settlement should be valid. If
     * not set will a default settlement value be used. In FullPaymentData it is also possible
     * to specifiy an expiration date of an settlement used if it's required to set a fixed time when
     * the settlement should expire, for example if a settlement should be valid the entire day or month.
     * <p>
     * If settlement expire date is set it has precedence over settlementDuration.
     * </p>
     *
     * @param settlementDuration the specific duration of this message.
     * @see FullPaymentData#getSettlementExpireDate()
     */
    @Override
    public void setSettlementDuration(Duration settlementDuration) {
        if(settlementDuration != null){
            this.settlementDuration = settlementDuration.getSeconds();
        }else {
            this.settlementDuration = null;
        }
    }

    /**
     * @return the date the settlement will expire used to indicate how long a settlement token should be valid.
     * If null will default settlement validity be used.
     */
    @Override
    public Instant getSettlementExpireDate() {
        return settlementExpireDate;
    }

    /**
     * @param settlementExpireDate the date the settlement will expire used to indicate how long a settlement token should be valid.
     *                       If null will default settlement validity be used.
     */
    @Override
    public void setSettlementExpireDate(Instant settlementExpireDate) {
        this.settlementExpireDate = settlementExpireDate;
    }

    /**
     * @return flag indicating that this payment is for one request only. The implementation
     * can take the payPerRequest flag from the order request as guidance, but it is the PaymentHandler
     * that ultimately decides if payPerRequest should be set.
     */
    @Override
    public boolean isPayPerRequest() {
        return payPerRequest;
    }

    /**
     * @param payPerRequest flag indicating that this payment is for one request only. The implementation
     *                      can take the payPerRequest flag from the order request as guidance, but it is the PaymentHandler
     *                      that ultimately decides if payPerRequest should be set.
     */
    @Override
    public void setPayPerRequest(boolean payPerRequest) {
        this.payPerRequest = payPerRequest;
    }

    /**
     * @return true if related request have been executed, is set after successful processing
     * if a payed call and used to indicate that it cannot be processed again.
     */
    @Override
    public boolean isExecuted() {
        return executed;
    }

    /**
     * @param executed true if related request have been executed, is set after successful processing
     *                 if a payed call and used to indicate that it cannot be processed again.
     */
    @Override
    public void setExecuted(boolean executed) {
        this.executed = executed;
    }


    @Override
    public String toString() {
        return "DemoFullPaymentData{" +
                "id=" + id +
                ", preImageHash='" + preImageHash + '\'' +
                ", bolt11Invoice='" + bolt11Invoice + '\'' +
                ", description='" + description + '\'' +
                ", orderAmount=" + orderAmount +
                ", invoiceAmount=" + invoiceAmount +
                ", settledAmount=" + settledAmount +
                ", settlementValidFrom=" + settlementValidFrom +
                ", settlementDate=" + settlementDate +
                ", settlementExpireDate=" + settlementExpireDate +
                ", invoiceDate=" + invoiceDate +
                ", invoiceExpireDate=" + invoiceExpireDate +
                ", settled=" + settled +
                ", payPerRequest=" + payPerRequest +
                ", executed=" + executed +
                '}';
    }
}
