/*
 *************************************************************************
 *                                                                       *
 *  LightningJ                                                           *
 *                                                                       *
 *  This software is free software; you can redistribute it and/or       *
 *  modify it under the terms of the GNU Lesser General Public License   *
 *  (LGPL-3.0-or-later)                                                  *
 *  License as published by the Free Software Foundation; either         *
 *  version 3 of the License, or any later version.                      *
 *                                                                       *
 *  See terms of license at gnu.org.                                     *
 *                                                                       *
 *************************************************************************/
package org.lightningj.paywall.vo;

import org.jose4j.jwt.JwtClaims;
import org.lightningj.paywall.JSONParsable;
import org.lightningj.paywall.paymenthandler.Payment;
import org.lightningj.paywall.tokengenerator.JWTClaim;
import org.lightningj.paywall.util.Base64Utils;
import org.lightningj.paywall.util.HexUtils;
import org.lightningj.paywall.vo.amount.Amount;

import javax.json.JsonException;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import java.time.Instant;
import java.util.Base64;

/**
 * Value object containing information needed to create
 * lightning invoice, generated by the PaymentHandler.
 *
 * Created by Philip Vendil on 2018-10-29.
 */
public class OrderData extends JWTClaim implements Payment {

    public static final String CLAIM_NAME = "payment";

    protected byte[] preImageHash;
    protected String description;
    protected Amount requestedAmount;
    protected Instant expireDate;

    /**
     * Empty Constructor
     */
    public OrderData(){}

    /**
     * Default Constructor.
     *
     * @param preImageHash the generated preImageHash from PreImageData.
     * @param description description to display in the invoice. (Optional).
     * @param requestedAmount the amount to create invoice for before eventual currency convertion. (Required)
     * @param expireDate the time when the payment should be considered expired and not accepted. (Required)
     */
    public OrderData(byte[] preImageHash, String description, Amount requestedAmount, Instant expireDate) {
        this.preImageHash = preImageHash;
        this.description = description;
        this.requestedAmount = requestedAmount;
        this.expireDate = expireDate;
    }

    /**
     * JSON Parseable constructor
     *
     * @param jsonObject the json object to parse
     */
    public OrderData(JsonObject jsonObject) throws JsonException {
        super(jsonObject);
    }

    /**
     * Parse from JWTClaims constructor
     *
     * @param jwtClaims the JWT Tokens Claim set to extract data from.
     */
    public OrderData(JwtClaims jwtClaims) {
        super(jwtClaims);
    }

    /**
     *
     * @return the generated preImageHash from PreImageData.
     */
    public byte[] getPreImageHash() {
        return preImageHash;
    }

    /**
     *
     * @param preImageHash the generated preImageHash from PreImageData.
     */
    public void setPreImageHash(byte[] preImageHash) {
        this.preImageHash = preImageHash;
    }

    /**
     *
     * @return description to display in the invoice. (Optional).
     */
    public String getDescription() {
        return description;
    }

    /**
     *
     * @param description description to display in the invoice. (Optional).
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     *
     * @return the amount to create invoice for before eventual currency convertion. (Required)
     */
    public Amount getRequestedAmount() {
        return requestedAmount;
    }

    /**
     *
     * @param requestedAmount the amount to create invoice for before eventual currency convertion. (Required)
     */
    public void setRequestedAmount(Amount requestedAmount) {
        this.requestedAmount = requestedAmount;
    }

    /**
     *
     * @return the time when the payment should be considered expired and not accepted. (Required)
     */
    public Instant getExpireDate() {
        return expireDate;
    }

    /**
     *
     * @param expireDate the time when the payment should be considered expired and not accepted. (Required)
     */
    public void setExpireDate(Instant expireDate) {
        this.expireDate = expireDate;
    }

    /**
     * Method that should set the objects property to Json representation.
     *
     * @param jsonObjectBuilder the json object build to use to set key/values in json
     * @throws JsonException if problems occurred converting object to JSON.
     */
    @Override
    public void convertToJson(JsonObjectBuilder jsonObjectBuilder) throws JsonException {
        add(jsonObjectBuilder,"preImageHash", Base64Utils.encodeBase64String(preImageHash));
        addNotRequired(jsonObjectBuilder,"description",description);
        add(jsonObjectBuilder,"requestedAmount", requestedAmount);
        add(jsonObjectBuilder,"expireDate",expireDate);
    }

    /**
     * Method to read all properties from a JsonObject into this value object.
     *
     * @param jsonObject the json object to read key and values from and set object properties.
     * @throws JsonException if problems occurred converting object from JSON.
     */
    @Override
    public void parseJson(JsonObject jsonObject) throws JsonException {
        preImageHash = getByteArrayFromB64(jsonObject,"preImageHash", true);
        description = getStringIfSet(jsonObject,"description");
        requestedAmount = Amount.parseAmountObject(getJsonObject(jsonObject,"requestedAmount",true));
        expireDate = Instant.ofEpochMilli(getLong(jsonObject,"expireDate", true));
    }

    @Override
    public String getClaimName() {
        return CLAIM_NAME;
    }
}
