/*
 *************************************************************************
 *                                                                       *
 *  LightningJ                                                           *
 *                                                                       *
 *  This software is free software; you can redistribute it and/or       *
 *  modify it under the terms of the GNU Lesser General Public License   *
 *  (LGPL-3.0-or-later)                                                  *
 *  License as published by the Free Software Foundation; either         *
 *  version 3 of the License, or any later version.                      *
 *                                                                       *
 *  See terms of license at gnu.org.                                     *
 *                                                                       *
 *************************************************************************/
package org.lightningj.paywall.paymenthandler.data;

import org.lightningj.paywall.vo.amount.Amount;

import java.time.Instant;

/**
 * Interface defining the minimal amount of information that needs to be stored
 * for a given payment flow. Should generally only be used in test environments
 * or proof of concepts.
 * <p>
 * When only implementing the minimal payment data it is assumed that the order
 * amount is the same as later invoice amount and settled amount.
 * <p>
 * If system should support payPerRequest payments should the implementing data
 * also implement the PerRequestPaymentData.
 *
 * @see PerRequestPaymentData
 *
 * Created by Philip Vendil on 2018-12-09.
 */
public interface MinimalPaymentData extends PaymentData{

    /**
     * Unique identifier of a payment in the system and also used in LightningHandler
     * to identify an invoice. Should be generated by TokenGenerator when
     * creating an order and not set manually.
     * @return the unique identifier of a payment.
     */
    byte[] getPreImageHash();

    /**
     *
     * @param preImageHash unique identifier of a payment in the system and also used in LightningHandler
     * to identify an invoice. Should be generated by TokenGenerator when
     * creating an order and not set manually.
     */
    void setPreImageHash(byte[] preImageHash);

    /**
     *
     * @return the requested amount for payment. This can be either a FiatAmount or CryptoAmount but
     * always make sure the systems configured CurrencyConverter supports this currency when converting
     * into a currency accepted by the LightningHandler later in the payment flow.
     */
    Amount getOrderAmount();

    /**
     *
     * @param orderAmount the requested amount for payment. This can be either a FiatAmount or CryptoAmount but
     * always make sure the systems configured CurrencyConverter supports this currency when converting
     * into a currency accepted by the LightningHandler later in the payment flow.
     */
    void setOrderAmount(Amount orderAmount);

    /**
     *
     * @return true if related invoice have been settled in full.
     */
    boolean isSettled();

    /**
     *
     * @param settled true if related invoice have been settled in full.
     */
    void setSettled(boolean settled);

}
