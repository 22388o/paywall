/*
 *************************************************************************
 *                                                                       *
 *  LightningJ                                                           *
 *                                                                       *
 *  This software is free software; you can redistribute it and/or       *
 *  modify it under the terms of the GNU Lesser General Public License   *
 *  (LGPL-3.0-or-later)                                                  *
 *  License as published by the Free Software Foundation; either         *
 *  version 3 of the License, or any later version.                      *
 *                                                                       *
 *  See terms of license at gnu.org.                                     *
 *                                                                       *
 *************************************************************************/
package org.lightningj.paywall.vo;

import org.jose4j.jwt.JwtClaims;
import org.lightningj.paywall.paymenthandler.Payment;
import org.lightningj.paywall.vo.amount.CryptoAmount;

import javax.json.JsonException;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import java.time.Instant;

/**
 * Invoice data is generated by LightningHandler and contains information about
 * one Lightning Invoice.
 *
 * Created by Philip Vendil on 2018-11-11.
 */
public class Invoice extends MinimalInvoice implements Payment {

    public static final String CLAIM_NAME = "invoice";

    protected String bolt11Invoice;
    protected String description;
    protected CryptoAmount invoiceAmount;
    protected NodeInfo nodeInfo;
    protected Instant expireDate;
    protected Instant invoiceDate;
    protected boolean settled;
    protected CryptoAmount settledAmount;
    protected Instant settlementDate;
    protected String sourceNode;

    /**
     * Empty Constructor
     */
    public Invoice(){}

    /**
     * Default constructor, for unsettled invoice.
     *
     * @param preImageHash the generated preImageHash from PreImageData which acts as an unique id for the payment.
     * @param bolt11Invoice the bolt11 invoice to display for the requester.
     * @param description description to display in the invoice. (Optional).
     * @param invoiceAmount the amount in the invoice. (Optional)
     * @param nodeInfo information about the lightning handlers lightning node. (Optional)
     * @param expireDate the time the invoice will expire.
     * @param invoiceDate the time this invoice was created.
     */
    public Invoice(byte[] preImageHash, String bolt11Invoice, String description, CryptoAmount invoiceAmount, NodeInfo nodeInfo, Instant expireDate, Instant invoiceDate) {
        this.preImageHash = preImageHash;
        this.bolt11Invoice = bolt11Invoice;
        this.description = description;
        this.invoiceAmount = invoiceAmount;
        this.nodeInfo = nodeInfo;
        this.expireDate = expireDate;
        this.invoiceDate = invoiceDate;
    }

    /**
     * Default constructor, for settled invoice.
     *
     * @param preImageHash the generated preImageHash from PreImageData which acts as an unique id for the payment.
     * @param bolt11Invoice the bolt11 invoice to display for the requester.
     * @param description description to display in the invoice. (Optional).
     * @param invoiceAmount the amount in the invoice. (Optional)
     * @param nodeInfo information about the lightning handlers lightning node. (Optional)
     * @param expireDate the time the invoice will expire.
     * @param invoiceDate the time this invoice was created.
     * @param settled if the payment was done successfully.
     * @param settledAmount the amount that was settled. (Optional)
     * @param settlementDate the time the payment was settled with the LightningHandler. (Optional)
     */
    public Invoice(byte[] preImageHash, String bolt11Invoice, String description, CryptoAmount invoiceAmount, NodeInfo nodeInfo,
                   Instant expireDate, Instant invoiceDate, boolean settled, CryptoAmount settledAmount,
                   Instant settlementDate) {
        this.preImageHash = preImageHash;
        this.bolt11Invoice = bolt11Invoice;
        this.description = description;
        this.invoiceAmount = invoiceAmount;
        this.nodeInfo = nodeInfo;
        this.expireDate = expireDate;
        this.invoiceDate = invoiceDate;
        this.settled = settled;
        this.settledAmount = settledAmount;
        this.settlementDate = settlementDate;
    }

    /**
     * JSON Parseable constructor
     *
     * @param jsonObject the json object to parse
     */
    public Invoice(JsonObject jsonObject) throws JsonException {
        super(jsonObject);
    }

    /**
     * Parse from JWTClaims constructor
     *
     * @param jwtClaims the JWT Tokens Claim set to extract data from.
     */
    public Invoice(JwtClaims jwtClaims) {
        super(jwtClaims);
    }

    /**
     *
     * @return the bolt11 invoice to display for the requester.
     */
    public String getBolt11Invoice() {
        return bolt11Invoice;
    }

    /**
     *
     * @param bolt11Invoice the bolt11 invoice to display for the requester.
     */
    public void setBolt11Invoice(String bolt11Invoice) {
        this.bolt11Invoice = bolt11Invoice;
    }

    /**
     *
     * @return description to display in the invoice. (Optional).
     */
    public String getDescription() {
        return description;
    }

    /**
     *
     * @param description to display in the invoice. (Optional).
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     *
     * @return the amount in the invoice. (Optional)
     */
    public CryptoAmount getInvoiceAmount() {
        return invoiceAmount;
    }

    /**
     *
     * @param invoiceAmount the amount in the invoice. (Optional)
     */
    public void setInvoiceAmount(CryptoAmount invoiceAmount) {
        this.invoiceAmount = invoiceAmount;
    }

    /**
     *
     * @return information about the lightning handlers lightning node. (Optional)
     */
    public NodeInfo getNodeInfo() {
        return nodeInfo;
    }

    /**
     *
     * @param nodeInfo information about the lightning handlers lightning node. (Optional)
     */
    public void setNodeInfo(NodeInfo nodeInfo) {
        this.nodeInfo = nodeInfo;
    }

    /**
     *
     * @return the time the invoice will expire.
     */
    public Instant getExpireDate() {
        return expireDate;
    }

    /**
     *
     * @param expireDate the time the invoice will expire.
     */
    public void setExpireDate(Instant expireDate) {
        this.expireDate = expireDate;
    }

    /**
     *
     * @return the time this invoice was created.
     */
    public Instant getInvoiceDate() {
        return invoiceDate;
    }

    /**
     *
     * @param invoiceDate the time this invoice was created.
     */
    public void setInvoiceDate(Instant invoiceDate) {
        this.invoiceDate = invoiceDate;
    }

    /**
     *
     * @return if the payment was done successfully.
     */
    public boolean isSettled() {
        return settled;
    }

    /**
     *
     * @param settled if the payment was done successfully.
     */
    public void setSettled(boolean settled) {
        this.settled = settled;
    }

    /**
     *
     * @return the amount that was settled. (Optional)
     */
    public CryptoAmount getSettledAmount() {
        return settledAmount;
    }

    /**
     *
     * @param settledAmount the amount that was settled.
     */
    public void setSettledAmount(CryptoAmount settledAmount) {
        this.settledAmount = settledAmount;
    }


    /**
     *
     * @return the time the payment was settled with the LightningHandler. (Optional)
     */
    public Instant getSettlementDate() {
        return settlementDate;
    }

    /**
     *
     * @param settlementDate the time the payment was settled with the LightningHandler.
     */
    public void setSettlementDate(Instant settlementDate) {
        this.settlementDate = settlementDate;
    }

    /**
     *
     * @return the source node of the node creating the order, used in a distributed environment
     * where the paywalled service and lightning handler is in different systems.
     */
    public String getSourceNode() {
        return sourceNode;
    }

    /**
     *
     * @param sourceNode the source node of the node creating the order, used in a distributed environment
     * where the paywalled service and lightning handler is in different systems.
     */
    public void setSourceNode(String sourceNode) {
        this.sourceNode = sourceNode;
    }

    /**
     * Method that should set the objects property to Json representation.
     *
     * @param jsonObjectBuilder the json object build to use to set key/values in json
     * @throws JsonException if problems occurred converting object to JSON.
     */
    @Override
    public void convertToJson(JsonObjectBuilder jsonObjectBuilder) throws JsonException {
        super.convertToJson(jsonObjectBuilder);
        add(jsonObjectBuilder,"bolt11Invoice", bolt11Invoice);
        addNotRequired(jsonObjectBuilder,"description", description);
        addNotRequired(jsonObjectBuilder,"invoiceAmount", invoiceAmount);
        addNotRequired(jsonObjectBuilder,"nodeInfo", nodeInfo);
        add(jsonObjectBuilder,"expireDate", expireDate);
        add(jsonObjectBuilder,"invoiceDate", invoiceDate);
        add(jsonObjectBuilder,"settled",settled);
        addNotRequired(jsonObjectBuilder,"settledAmount",settledAmount);
        addNotRequired(jsonObjectBuilder,"settlementDate",settlementDate);
        addNotRequired(jsonObjectBuilder,"sourceNode",sourceNode);
    }

    /**
     * Method to read all properties from a JsonObject into this value object.
     *
     * @param jsonObject the json object to read key and values from and set object properties.
     * @throws JsonException if problems occurred converting object from JSON.
     */
    @Override
    public void parseJson(JsonObject jsonObject) throws JsonException {
        super.parseJson(jsonObject);
        bolt11Invoice = getString(jsonObject,"bolt11Invoice", true);
        description = getStringIfSet(jsonObject,"description");
        if(jsonObject.containsKey("invoiceAmount") && !jsonObject.isNull("invoiceAmount")) {
            invoiceAmount = new CryptoAmount(getJsonObject(jsonObject, "invoiceAmount", false));
        }
        if(jsonObject.containsKey("nodeInfo") && !jsonObject.isNull("nodeInfo")) {
            nodeInfo = new NodeInfo(getJsonObject(jsonObject,"nodeInfo", false));
        }
        expireDate = Instant.ofEpochMilli(getLong(jsonObject,"expireDate", true));
        invoiceDate = Instant.ofEpochMilli(getLong(jsonObject,"invoiceDate", true));
        if(jsonObject.containsKey("settled") && !jsonObject.isNull("settled")) {
            settled = getBoolean(jsonObject, "settled", settled);
        }
        if(jsonObject.containsKey("settledAmount") && !jsonObject.isNull("settledAmount")) {
            settledAmount = new CryptoAmount(getJsonObject(jsonObject, "settledAmount", false));
        }
        if(jsonObject.containsKey("settlementDate") && !jsonObject.isNull("settlementDate")) {
            settlementDate = Instant.ofEpochMilli(getLong(jsonObject,"settlementDate", true));
        }
        sourceNode = getStringIfSet(jsonObject,"sourceNode");
    }

    @Override
    public String getClaimName() {
        return CLAIM_NAME;
    }
}
