/*
 *************************************************************************
 *                                                                       *
 *  LightningJ                                                           *
 *                                                                       *
 *  This software is free software; you can redistribute it and/or       *
 *  modify it under the terms of the GNU Lesser General Public License   *
 *  (LGPL-3.0-or-later)                                                  *
 *  License as published by the Free Software Foundation; either         *
 *  version 3 of the License, or any later version.                      *
 *                                                                       *
 *  See terms of license at gnu.org.                                     *
 *                                                                       *
 *************************************************************************/
package org.lightningj.paywall.paymenthandler;

import org.lightningj.paywall.JSONParsable;

import org.lightningj.paywall.vo.Invoice;

import javax.json.JsonException;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;

/**
 * Object generated by Payment whenever an payment have been updated.
 *
 * Created by Philip Vendil on 2018-12-04.
 */
public class PaymentEvent  extends JSONParsable {

    protected PaymentEventType type;
    protected Payment payment;

    /**
     * Empty constructor
     */
    public PaymentEvent(){}

    /**
     * Default constructor
     *
     * @param type the type of payment event.
     * @param payment the related payment, either Order, Invoice or
     *                Settlement depending on state of payment.
     */
    public PaymentEvent(PaymentEventType type, Payment payment) {
        this.type = type;
        this.payment = payment;
    }

    /**
     * JSON Parseable constructor
     *
     * @param jsonObject the json object to parse.
     */
    public PaymentEvent(JsonObject jsonObject) throws JsonException {
        super(jsonObject);
    }

    /**
     *
     * @return the type of payment event.
     */
    public PaymentEventType getType() {
        return type;
    }

    /**
     *
     * @param type the type of payment event.
     */
    public void setType(PaymentEventType type) {
        this.type = type;
    }

    /**
     *
     * @return the related payment, either Order, Invoice or
     *                Settlement depending on state of payment.
     */
    public Payment getPayment() {
        return payment;
    }

    /**
     *
     * @param payment the related payment, either Order, Invoice or
     *                Settlement depending on state of payment.
     */
    public void setPayment(Payment payment) {
        this.payment = payment;
    }

    /**
     * Method that should set the objects property to Json representation.
     *
     * @param jsonObjectBuilder the json object build to use to set key/values in json
     * @throws JsonException if problems occurred converting object to JSON.
     */
    @Override
    public void convertToJson(JsonObjectBuilder jsonObjectBuilder) throws JsonException {
        if(type == null){
            throw new JsonException("Error building JSON object, required key type is null.");
        }
        add(jsonObjectBuilder,"type",type.name());
        add(jsonObjectBuilder,"payment",payment);
    }

    /**
     * Method to read all properties from a JsonObject into this value object.
     *
     * @param jsonObject the json object to read key and values from and set object properties.
     * @throws JsonException if problems occurred converting object from JSON.
     */
    @Override
    public void parseJson(JsonObject jsonObject) throws JsonException {
        String typeValue = getString(jsonObject,"type", true);
        try{
            type = PaymentEventType.valueOf(typeValue.toUpperCase());
        }catch (Exception e){
            if(e instanceof JsonException){
                throw (JsonException) e;
            }
            throw new JsonException("Error parsing JSON, invalid payment event type " + typeValue + ".");
        }

        payment = new Invoice(getJsonObject(jsonObject,"payment",true));
    }
}
